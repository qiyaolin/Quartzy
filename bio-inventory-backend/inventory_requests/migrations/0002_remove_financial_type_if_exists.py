# Generated by Django 5.2.4 on 2025-07-26 23:15

from django.db import migrations, connection


def remove_financial_type_if_exists(apps, schema_editor):
    """安全地移除financial_type字段，如果它存在的话"""
    with connection.cursor() as cursor:
        # 检查字段是否存在
        field_exists = False
        
        if connection.vendor == 'postgresql':
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name='inventory_requests_request' AND column_name='financial_type'
            """)
            field_exists = cursor.fetchone() is not None
        else:  # SQLite
            cursor.execute("PRAGMA table_info(inventory_requests_request)")
            columns = [row[1] for row in cursor.fetchall()]
            field_exists = 'financial_type' in columns
        
        # 如果字段存在，删除它
        if field_exists:
            if connection.vendor == 'postgresql':
                cursor.execute("ALTER TABLE inventory_requests_request DROP COLUMN financial_type")
            else:  # SQLite - 需要重建表
                # SQLite不支持DROP COLUMN，所以我们跳过本地删除
                # 生产环境使用PostgreSQL会正确处理
                print("SQLite环境跳过删除financial_type字段，生产环境将正确处理")


def add_financial_type_if_not_exists(apps, schema_editor):
    """反向操作：如果需要的话添加字段"""
    # 这是一个不可逆的操作，因为我们不知道原始数据
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('inventory_requests', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            remove_financial_type_if_exists,
            add_financial_type_if_not_exists,
        ),
    ]