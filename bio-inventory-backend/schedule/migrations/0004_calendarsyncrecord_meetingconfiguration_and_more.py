# Generated by Django 5.2.4 on 2025-08-07 15:48

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('schedule', '0003_create_usage_log'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CalendarSyncRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('google_event_id', models.CharField(blank=True, help_text='Google Calendar event ID', max_length=255, null=True)),
                ('sync_enabled', models.BooleanField(default=True, help_text='Whether sync is enabled for this object')),
                ('sync_status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Success'), ('error', 'Error'), ('disabled', 'Disabled')], default='pending', help_text='Current sync status', max_length=20)),
                ('error_message', models.TextField(blank=True, help_text='Error message if sync failed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_synced_at', models.DateTimeField(blank=True, help_text='Last successful sync timestamp', null=True)),
            ],
            options={
                'verbose_name': 'Calendar Sync Record',
                'verbose_name_plural': 'Calendar Sync Records',
            },
        ),
        migrations.CreateModel(
            name='MeetingConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Sunday'), (1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday')], default=1, help_text='Day of week for regular meetings (0=Sunday)')),
                ('start_time', models.TimeField(default='10:00', help_text='Regular meeting start time')),
                ('location', models.CharField(default='Conference Room', help_text='Default meeting location', max_length=255)),
                ('research_update_duration', models.PositiveIntegerField(default=120, help_text='Research Update meeting duration in minutes')),
                ('journal_club_duration', models.PositiveIntegerField(default=60, help_text='Journal Club meeting duration in minutes')),
                ('jc_submission_deadline_days', models.PositiveIntegerField(default=7, help_text='Journal Club paper submission deadline (days before meeting)')),
                ('jc_final_deadline_days', models.PositiveIntegerField(default=3, help_text='Journal Club paper final deadline (days before meeting)')),
                ('require_admin_approval', models.BooleanField(default=True, help_text='Require admin approval for swap/postpone requests')),
                ('default_postpone_strategy', models.CharField(choices=[('skip', 'Skip this occurrence'), ('cascade', 'Cascade all subsequent meetings')], default='skip', help_text='Default strategy when postponing meetings', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Meeting Configuration',
                'verbose_name_plural': 'Meeting Configurations',
            },
        ),
        migrations.CreateModel(
            name='MeetingInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Meeting date')),
                ('meeting_type', models.CharField(choices=[('research_update', 'Research Update'), ('journal_club', 'Journal Club'), ('special', 'Special Meeting')], help_text='Type of meeting', max_length=20)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('postponed', 'Postponed')], default='scheduled', help_text='Meeting status', max_length=20)),
                ('actual_duration', models.PositiveIntegerField(blank=True, help_text='Actual meeting duration in minutes', null=True)),
                ('notes', models.TextField(blank=True, help_text='Meeting notes', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='NotificationRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('assignment', 'Task Assignment'), ('reminder', 'Task Reminder'), ('overdue', 'Task Overdue'), ('swap_request', 'Swap Request'), ('swap_approved', 'Swap Approved'), ('completion', 'Task Completion')], max_length=20)),
                ('channel', models.CharField(choices=[('email', 'Email'), ('in_app', 'In-App'), ('both', 'Both')], default='email', max_length=20)),
                ('sent_to_users', models.JSONField(default=list, help_text='List of user IDs who received notification')),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('content_summary', models.TextField(help_text='Summary of notification content')),
                ('email_sent', models.BooleanField(default=False)),
                ('email_errors', models.JSONField(default=list, help_text='Email sending errors')),
            ],
            options={
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='PeriodicTaskInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_name', models.CharField(help_text='Template name at creation time', max_length=255)),
                ('scheduled_period', models.CharField(help_text='Period in YYYY-MM format', max_length=7)),
                ('execution_start_date', models.DateField(help_text='Execution window start date')),
                ('execution_end_date', models.DateField(help_text='Execution window end date')),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('overdue', 'Overdue'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('original_assignees', models.JSONField(default=list, help_text='Original assignee user IDs')),
                ('current_assignees', models.JSONField(default=list, help_text='Current assignee user IDs after swaps')),
                ('assignment_metadata', models.JSONField(default=dict, help_text='Assignment roles and timestamps')),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('completion_duration', models.PositiveIntegerField(blank=True, help_text='Actual completion time in minutes', null=True)),
                ('completion_notes', models.TextField(blank=True, null=True)),
                ('completion_photos', models.JSONField(default=list, help_text='List of photo URLs')),
                ('completion_rating', models.PositiveIntegerField(blank=True, help_text='Self-rating 1-5', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-scheduled_period', 'execution_start_date'],
            },
        ),
        migrations.CreateModel(
            name='PresentationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('presentation_count', models.PositiveIntegerField(default=0, help_text='Total number of presentations by this user')),
                ('total_duration', models.PositiveIntegerField(default=0, help_text='Total presentation time in minutes')),
                ('average_rating', models.FloatField(blank=True, help_text='Average presentation rating', null=True)),
                ('archived_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Presentation History',
                'verbose_name_plural': 'Presentation Histories',
                'ordering': ['-archived_at'],
            },
        ),
        migrations.CreateModel(
            name='Presenter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=1, help_text='Presentation order (for multiple presenters)')),
                ('status', models.CharField(choices=[('assigned', 'Assigned'), ('confirmed', 'Confirmed'), ('completed', 'Completed'), ('swapped', 'Swapped'), ('postponed', 'Postponed')], default='assigned', help_text='Presenter status', max_length=20)),
                ('topic', models.CharField(blank=True, help_text='Presentation topic (for Research Updates)', max_length=255, null=True)),
                ('paper_title', models.CharField(blank=True, help_text='Paper title for Journal Club', max_length=500, null=True)),
                ('paper_url', models.URLField(blank=True, help_text='Paper URL', null=True)),
                ('paper_file', models.FileField(blank=True, help_text='Paper PDF file', null=True, upload_to='journal_club_papers/')),
                ('slides_file', models.FileField(blank=True, help_text='Presentation slides', null=True, upload_to='meeting_slides/')),
                ('materials_submitted_at', models.DateTimeField(blank=True, help_text='When materials were submitted', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['meeting_instance__date', 'order'],
            },
        ),
        migrations.CreateModel(
            name='QueueEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('next_scheduled_date', models.DateField(blank=True, help_text='Next scheduled presentation date', null=True)),
                ('last_presented_date', models.DateField(blank=True, help_text='Date of last presentation', null=True)),
                ('postpone_count', models.PositiveIntegerField(default=0, help_text='Number of times presentation was postponed')),
                ('priority', models.FloatField(default=50.0, help_text='Priority score calculated by fairness algorithm')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-priority', 'last_presented_date'],
            },
        ),
        migrations.CreateModel(
            name='QueueMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_assignments', models.PositiveIntegerField(default=0)),
                ('last_assigned_date', models.DateTimeField(blank=True, null=True)),
                ('last_assigned_period', models.CharField(blank=True, help_text='Last assigned period in YYYY-MM format', max_length=7, null=True)),
                ('completion_rate', models.FloatField(default=100.0, help_text='Completion rate percentage')),
                ('average_completion_time', models.FloatField(blank=True, help_text='Average completion time in hours', null=True)),
                ('priority_score', models.FloatField(default=50.0)),
                ('is_active', models.BooleanField(default=True)),
                ('availability_data', models.JSONField(default=dict, help_text='Availability preferences and exclusions')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-priority_score'],
            },
        ),
        migrations.CreateModel(
            name='RotationSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default Rotation', help_text='Rotation system name', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this rotation system is active')),
                ('min_gap_between_presentations', models.PositiveIntegerField(default=4, help_text='Minimum weeks between presentations for the same person')),
                ('max_consecutive_presenters', models.PositiveIntegerField(default=2, help_text='Maximum consecutive presenters in one meeting')),
                ('fairness_weight', models.FloatField(default=1.0, help_text='Weight for fairness calculation')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Rotation System',
            },
        ),
        migrations.CreateModel(
            name='StatusChangeRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_status', models.CharField(max_length=20)),
                ('to_status', models.CharField(max_length=20)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('reason', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-changed_at'],
            },
        ),
        migrations.CreateModel(
            name='SwapRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_type', models.CharField(choices=[('swap', 'Swap with another presenter'), ('postpone', 'Postpone presentation')], help_text='Type of request', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending', help_text='Request status', max_length=20)),
                ('reason', models.TextField(help_text='Reason for the request')),
                ('target_user_approved', models.BooleanField(blank=True, help_text='Whether target user approved the swap', null=True)),
                ('target_user_approved_at', models.DateTimeField(blank=True, help_text='When target user approved', null=True)),
                ('admin_approved', models.BooleanField(blank=True, help_text='Whether admin approved the request', null=True)),
                ('admin_approved_at', models.DateTimeField(blank=True, help_text='When admin approved', null=True)),
                ('cascade_effect', models.CharField(blank=True, choices=[('skip', 'Skip'), ('cascade', 'Cascade')], help_text='How postponement affects subsequent meetings', max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskRotationQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algorithm', models.CharField(choices=[('fair_rotation', 'Fair Rotation'), ('random', 'Random'), ('sequential', 'Sequential')], default='fair_rotation', max_length=20)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('min_gap_months', models.PositiveIntegerField(default=1, help_text='Minimum months between assignments for same person')),
                ('consider_workload', models.BooleanField(default=True, help_text='Consider overall workload balance')),
                ('random_factor', models.FloatField(default=0.1, help_text='Random factor weight (0-1)')),
            ],
            options={
                'verbose_name': 'Task Rotation Queue',
            },
        ),
        migrations.CreateModel(
            name='TaskSwapRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_type', models.CharField(choices=[('swap', 'Swap with another user'), ('transfer', 'Transfer to another user')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('reason', models.TextField(help_text='Reason for the request')),
                ('target_user_approved', models.BooleanField(blank=True, help_text='Target user approval for swap requests', null=True)),
                ('target_user_approved_at', models.DateTimeField(blank=True, null=True)),
                ('admin_approved', models.BooleanField(blank=True, help_text='Admin approval if required', null=True)),
                ('admin_approved_at', models.DateTimeField(blank=True, null=True)),
                ('is_public_pool', models.BooleanField(default=False, help_text='Published to public swap pool')),
                ('pool_published_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Task template name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Task description', null=True)),
                ('task_type', models.CharField(choices=[('recurring', 'Recurring'), ('one_time', 'One Time')], default='recurring', max_length=20)),
                ('category', models.CharField(choices=[('system', 'System'), ('custom', 'Custom')], default='custom', max_length=20)),
                ('frequency', models.CharField(blank=True, choices=[('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('custom', 'Custom')], help_text='Frequency for recurring tasks', max_length=20, null=True)),
                ('interval', models.PositiveIntegerField(default=1, help_text='Frequency multiplier (e.g., 3 for every 3 months)')),
                ('start_date', models.DateField(default=django.utils.timezone.now, help_text='Task series start date')),
                ('end_date', models.DateField(blank=True, help_text='Task series end date (optional)', null=True)),
                ('min_people', models.PositiveIntegerField(default=1, help_text='Minimum people required')),
                ('max_people', models.PositiveIntegerField(default=2, help_text='Maximum people allowed')),
                ('default_people', models.PositiveIntegerField(default=1, help_text='Default people to assign')),
                ('estimated_hours', models.FloatField(blank=True, help_text='Estimated hours to complete', null=True)),
                ('window_type', models.CharField(choices=[('fixed', 'Fixed'), ('flexible', 'Flexible')], default='fixed', max_length=20)),
                ('fixed_start_day', models.PositiveIntegerField(blank=True, help_text='Start day of month for fixed window', null=True)),
                ('fixed_end_day', models.PositiveIntegerField(blank=True, help_text='End day of month for fixed window', null=True)),
                ('flexible_position', models.CharField(blank=True, choices=[('start', 'Month Start'), ('middle', 'Month Middle'), ('end', 'Month End')], max_length=20, null=True)),
                ('flexible_duration', models.PositiveIntegerField(blank=True, help_text='Duration in days for flexible window', null=True)),
                ('priority', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.RemoveField(
            model_name='waitingqueueentry',
            name='notified_at',
        ),
        migrations.AddField(
            model_name='booking',
            name='actual_end_time',
            field=models.DateTimeField(blank=True, help_text='Actual time when equipment usage ended', null=True),
        ),
        migrations.AddField(
            model_name='booking',
            name='early_finish_notified',
            field=models.BooleanField(default=False, help_text='Whether early finish notification was sent'),
        ),
        migrations.AddField(
            model_name='equipmentusagelog',
            name='booking',
            field=models.ForeignKey(blank=True, help_text='Associated booking if any', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='usage_logs', to='schedule.booking'),
        ),
        migrations.AddField(
            model_name='waitingqueueentry',
            name='notification_sent_at',
            field=models.DateTimeField(blank=True, help_text='When notification was sent to user', null=True),
        ),
        migrations.AddField(
            model_name='waitingqueueentry',
            name='time_slot',
            field=models.ForeignKey(blank=True, help_text='Time slot user is waiting for', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='waiting_queue', to='schedule.booking'),
        ),
        migrations.AlterField(
            model_name='booking',
            name='equipment',
            field=models.ForeignKey(help_text='Booked equipment', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='schedule.equipment'),
        ),
        migrations.AlterField(
            model_name='booking',
            name='event',
            field=models.OneToOneField(help_text='Associated event', on_delete=django.db.models.deletion.CASCADE, related_name='booking', to='schedule.event'),
        ),
        migrations.AlterField(
            model_name='booking',
            name='notes',
            field=models.TextField(blank=True, help_text='Booking notes', null=True),
        ),
        migrations.AlterField(
            model_name='booking',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed'), ('in_progress', 'In Progress')], default='pending', help_text='Booking status', max_length=20),
        ),
        migrations.AlterField(
            model_name='booking',
            name='user',
            field=models.ForeignKey(help_text='Booking user', on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='booking',
            name='waiting_list',
            field=models.ManyToManyField(blank=True, help_text='Users in waiting list', related_name='waiting_bookings', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='description',
            field=models.TextField(blank=True, help_text='Equipment description', null=True),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='is_bookable',
            field=models.BooleanField(default=True, help_text='Whether equipment can be booked'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='location',
            field=models.CharField(blank=True, help_text='Equipment location', max_length=255),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='name',
            field=models.CharField(help_text='Equipment name, e.g., Microscope, BSC', max_length=255),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='requires_qr_checkin',
            field=models.BooleanField(default=False, help_text='Whether QR code check-in is required'),
        ),
        migrations.AlterField(
            model_name='equipmentusagelog',
            name='equipment',
            field=models.ForeignKey(help_text='Equipment being used', on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='schedule.equipment'),
        ),
        migrations.AlterField(
            model_name='equipmentusagelog',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Whether this is an active usage session'),
        ),
        migrations.AlterField(
            model_name='equipmentusagelog',
            name='notes',
            field=models.TextField(blank=True, help_text='Additional usage notes', null=True),
        ),
        migrations.AlterField(
            model_name='equipmentusagelog',
            name='usage_duration',
            field=models.DurationField(blank=True, help_text='Total usage duration', null=True),
        ),
        migrations.AlterField(
            model_name='equipmentusagelog',
            name='user',
            field=models.ForeignKey(help_text='User using the equipment', on_delete=django.db.models.deletion.CASCADE, related_name='equipment_usage_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='taskinstance',
            name='assigned_to',
            field=models.ManyToManyField(help_text='Assigned users', related_name='assigned_tasks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='taskinstance',
            name='completed_at',
            field=models.DateTimeField(blank=True, help_text='Completion time', null=True),
        ),
        migrations.AlterField(
            model_name='taskinstance',
            name='completion_notes',
            field=models.TextField(blank=True, help_text='Completion notes', null=True),
        ),
        migrations.AlterField(
            model_name='taskinstance',
            name='event',
            field=models.OneToOneField(help_text='Associated event', on_delete=django.db.models.deletion.CASCADE, related_name='task_instance', to='schedule.event'),
        ),
        migrations.AlterField(
            model_name='taskinstance',
            name='recurring_task',
            field=models.ForeignKey(blank=True, help_text='Associated recurring task', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='schedule.recurringtask'),
        ),
        migrations.AlterField(
            model_name='taskinstance',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', help_text='Task status', max_length=20),
        ),
        migrations.AlterField(
            model_name='waitingqueueentry',
            name='position',
            field=models.PositiveIntegerField(help_text='Position in queue'),
        ),
        migrations.AlterField(
            model_name='waitingqueueentry',
            name='requested_end_time',
            field=models.DateTimeField(help_text='When user plans to finish using equipment'),
        ),
        migrations.AlterField(
            model_name='waitingqueueentry',
            name='status',
            field=models.CharField(choices=[('waiting', 'Waiting'), ('notified', 'Notified'), ('converted_to_booking', 'Converted to Booking'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='waiting', help_text='Status of queue entry', max_length=20),
        ),
        migrations.AlterField(
            model_name='waitingqueueentry',
            name='user',
            field=models.ForeignKey(help_text='User in waiting queue', on_delete=django.db.models.deletion.CASCADE, related_name='waiting_queue_entries', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='equipmentusagelog',
            index=models.Index(fields=['equipment', 'check_in_time'], name='schedule_eq_equipme_2088a1_idx'),
        ),
        migrations.AddIndex(
            model_name='equipmentusagelog',
            index=models.Index(fields=['user', 'check_in_time'], name='schedule_eq_user_id_e03600_idx'),
        ),
        migrations.AddIndex(
            model_name='equipmentusagelog',
            index=models.Index(fields=['is_active'], name='schedule_eq_is_acti_880401_idx'),
        ),
        migrations.AddIndex(
            model_name='equipmentusagelog',
            index=models.Index(fields=['check_in_time'], name='schedule_eq_check_i_811aa5_idx'),
        ),
        migrations.AddIndex(
            model_name='waitingqueueentry',
            index=models.Index(fields=['equipment', 'status'], name='schedule_wa_equipme_156a2c_idx'),
        ),
        migrations.AddIndex(
            model_name='waitingqueueentry',
            index=models.Index(fields=['user', 'status'], name='schedule_wa_user_id_5afd91_idx'),
        ),
        migrations.AddIndex(
            model_name='waitingqueueentry',
            index=models.Index(fields=['expires_at'], name='schedule_wa_expires_e3a566_idx'),
        ),
        migrations.AddField(
            model_name='calendarsyncrecord',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='meetingconfiguration',
            name='active_members',
            field=models.ManyToManyField(help_text='Current active lab members', related_name='meeting_configuration_members', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetingconfiguration',
            name='created_by',
            field=models.ForeignKey(help_text='Admin who created this configuration', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_meeting_configs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='meetinginstance',
            name='event',
            field=models.OneToOneField(help_text='Associated calendar event', on_delete=django.db.models.deletion.CASCADE, related_name='meeting_instance', to='schedule.event'),
        ),
        migrations.AddField(
            model_name='periodictaskinstance',
            name='completed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completed_periodic_tasks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notificationrecord',
            name='task_instance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='schedule.periodictaskinstance'),
        ),
        migrations.AddField(
            model_name='presenter',
            name='meeting_instance',
            field=models.ForeignKey(help_text='Associated meeting', on_delete=django.db.models.deletion.CASCADE, related_name='presenters', to='schedule.meetinginstance'),
        ),
        migrations.AddField(
            model_name='presenter',
            name='user',
            field=models.ForeignKey(help_text='Presenter user', on_delete=django.db.models.deletion.CASCADE, related_name='presentations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='presentationhistory',
            name='presenter',
            field=models.ForeignKey(help_text='Presenter record', on_delete=django.db.models.deletion.CASCADE, related_name='history_records', to='schedule.presenter'),
        ),
        migrations.AddField(
            model_name='queueentry',
            name='user',
            field=models.ForeignKey(help_text='User in rotation queue', on_delete=django.db.models.deletion.CASCADE, related_name='rotation_queue_entries', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='queuemember',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='queueentry',
            name='rotation_system',
            field=models.ForeignKey(help_text='Associated rotation system', on_delete=django.db.models.deletion.CASCADE, related_name='queue_entries', to='schedule.rotationsystem'),
        ),
        migrations.AddField(
            model_name='statuschangerecord',
            name='changed_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='statuschangerecord',
            name='task_instance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_history', to='schedule.periodictaskinstance'),
        ),
        migrations.AddField(
            model_name='swaprequest',
            name='admin_approved_by',
            field=models.ForeignKey(blank=True, help_text='Admin who approved the request', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_swap_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='swaprequest',
            name='original_presentation',
            field=models.ForeignKey(help_text='Original presentation to be swapped/postponed', on_delete=django.db.models.deletion.CASCADE, related_name='original_swap_requests', to='schedule.presenter'),
        ),
        migrations.AddField(
            model_name='swaprequest',
            name='requester',
            field=models.ForeignKey(help_text='User making the request', on_delete=django.db.models.deletion.CASCADE, related_name='swap_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='swaprequest',
            name='target_presentation',
            field=models.ForeignKey(blank=True, help_text='Target presentation to swap with', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='target_swap_requests', to='schedule.presenter'),
        ),
        migrations.AddField(
            model_name='queuemember',
            name='rotation_queue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queue_members', to='schedule.taskrotationqueue'),
        ),
        migrations.AddField(
            model_name='taskswaprequest',
            name='admin_approved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_task_swaps', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='taskswaprequest',
            name='from_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_swap_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='taskswaprequest',
            name='task_instance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='swap_requests', to='schedule.periodictaskinstance'),
        ),
        migrations.AddField(
            model_name='taskswaprequest',
            name='to_user',
            field=models.ForeignKey(blank=True, help_text='Target user for direct swap/transfer', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='incoming_swap_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tasktemplate',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_task_templates', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='taskrotationqueue',
            name='template',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rotation_queue', to='schedule.tasktemplate'),
        ),
        migrations.AddField(
            model_name='periodictaskinstance',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_instances', to='schedule.tasktemplate'),
        ),
        migrations.AddIndex(
            model_name='calendarsyncrecord',
            index=models.Index(fields=['content_type', 'object_id'], name='schedule_ca_content_49a524_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarsyncrecord',
            index=models.Index(fields=['google_event_id'], name='schedule_ca_google__175f78_idx'),
        ),
        migrations.AddIndex(
            model_name='calendarsyncrecord',
            index=models.Index(fields=['sync_status'], name='schedule_ca_sync_st_a331b7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='calendarsyncrecord',
            unique_together={('content_type', 'object_id')},
        ),
        migrations.AlterUniqueTogether(
            name='meetinginstance',
            unique_together={('date', 'meeting_type')},
        ),
        migrations.AlterUniqueTogether(
            name='presenter',
            unique_together={('meeting_instance', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='queueentry',
            unique_together={('rotation_system', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='queuemember',
            unique_together={('rotation_queue', 'user')},
        ),
        migrations.AddIndex(
            model_name='periodictaskinstance',
            index=models.Index(fields=['scheduled_period'], name='schedule_pe_schedul_a85a15_idx'),
        ),
        migrations.AddIndex(
            model_name='periodictaskinstance',
            index=models.Index(fields=['status'], name='schedule_pe_status_60173e_idx'),
        ),
        migrations.AddIndex(
            model_name='periodictaskinstance',
            index=models.Index(fields=['execution_start_date'], name='schedule_pe_executi_6debbe_idx'),
        ),
        migrations.AddIndex(
            model_name='periodictaskinstance',
            index=models.Index(fields=['execution_end_date'], name='schedule_pe_executi_7f65b5_idx'),
        ),
    ]
