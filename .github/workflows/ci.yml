name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: test_quartzy
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('bio-inventory-backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install backend dependencies
      working-directory: bio-inventory-backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend linting
      working-directory: bio-inventory-backend
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run backend tests
      working-directory: bio-inventory-backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_quartzy
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
      run: |
        python manage.py migrate
        python manage.py test

    - name: Generate backend coverage report
      working-directory: bio-inventory-backend
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_quartzy
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
      run: |
        pip install coverage
        coverage run --source='.' manage.py test
        coverage xml

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: bio-inventory-backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: bio-inventory-frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: bio-inventory-frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: bio-inventory-frontend
      run: npm run lint

    - name: Run frontend tests
      working-directory: bio-inventory-frontend
      run: npm test -- --coverage --watchAll=false

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: bio-inventory-frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Test Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: bio-inventory-backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/quartzy-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/quartzy-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: bio-inventory-frontend
        target: production
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/quartzy-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/quartzy-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v3

    - name: Build and start services
      run: |
        docker-compose -f docker-compose.yml up -d --build
        sleep 30

    - name: Wait for services to be ready
      run: |
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:8000/api/
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:3000/

    - name: Run integration tests
      run: |
        # Add your integration test commands here
        echo "Integration tests would run here"

    - name: Stop services
      if: always()
      run: docker-compose down

  # Deployment (example for staging)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deployment to staging would happen here"
        # Add your deployment commands here
        # This could involve SSH, kubectl, docker-compose, etc.

  # Create Release
  create-release:
    runs-on: ubuntu-latest
    needs: [docker-build, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this Release
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Docker Images
          - Backend: `${{ secrets.DOCKER_USERNAME }}/quartzy-backend:${{ github.sha }}`
          - Frontend: `${{ secrets.DOCKER_USERNAME }}/quartzy-frontend:${{ github.sha }}`
        draft: false
        prerelease: false